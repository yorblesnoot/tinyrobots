//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/BaseInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseInput"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""8ae54e02-a8b3-4a49-9b2c-e3fde379bc27"",
            ""actions"": [
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""6e735883-e77d-4db7-86bb-714e5d1af1c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""21f18ee2-47e1-48f4-b40f-b80d589c023b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateOn"",
                    ""type"": ""Button"",
                    ""id"": ""d527f97b-f3fd-41e8-9464-5890f28fb1b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotatePosition"",
                    ""type"": ""Value"",
                    ""id"": ""c26f0b01-c13d-47f2-af74-3afef0ff4aa4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotating"",
                    ""type"": ""Button"",
                    ""id"": ""d190e3c3-881f-495b-a2b3-d6a85f7517d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""660ef94d-f8c4-40b2-b1a2-e94109e67b68"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8fa78b7-3a91-431d-827c-305bc587ee20"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d6199a8-3cd7-40d9-82e0-6384818a90a4"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0efc9c48-5fa4-4554-81ae-b5da3259ee82"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cd3a4b4-264e-40e9-bca4-44f6e7bae8cd"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_ZoomIn = m_Main.FindAction("ZoomIn", throwIfNotFound: true);
        m_Main_ZoomOut = m_Main.FindAction("ZoomOut", throwIfNotFound: true);
        m_Main_RotateOn = m_Main.FindAction("RotateOn", throwIfNotFound: true);
        m_Main_RotatePosition = m_Main.FindAction("RotatePosition", throwIfNotFound: true);
        m_Main_Rotating = m_Main.FindAction("Rotating", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_ZoomIn;
    private readonly InputAction m_Main_ZoomOut;
    private readonly InputAction m_Main_RotateOn;
    private readonly InputAction m_Main_RotatePosition;
    private readonly InputAction m_Main_Rotating;
    public struct MainActions
    {
        private @BaseInput m_Wrapper;
        public MainActions(@BaseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomIn => m_Wrapper.m_Main_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_Main_ZoomOut;
        public InputAction @RotateOn => m_Wrapper.m_Main_RotateOn;
        public InputAction @RotatePosition => m_Wrapper.m_Main_RotatePosition;
        public InputAction @Rotating => m_Wrapper.m_Main_Rotating;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
            @RotateOn.started += instance.OnRotateOn;
            @RotateOn.performed += instance.OnRotateOn;
            @RotateOn.canceled += instance.OnRotateOn;
            @RotatePosition.started += instance.OnRotatePosition;
            @RotatePosition.performed += instance.OnRotatePosition;
            @RotatePosition.canceled += instance.OnRotatePosition;
            @Rotating.started += instance.OnRotating;
            @Rotating.performed += instance.OnRotating;
            @Rotating.canceled += instance.OnRotating;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
            @RotateOn.started -= instance.OnRotateOn;
            @RotateOn.performed -= instance.OnRotateOn;
            @RotateOn.canceled -= instance.OnRotateOn;
            @RotatePosition.started -= instance.OnRotatePosition;
            @RotatePosition.performed -= instance.OnRotatePosition;
            @RotatePosition.canceled -= instance.OnRotatePosition;
            @Rotating.started -= instance.OnRotating;
            @Rotating.performed -= instance.OnRotating;
            @Rotating.canceled -= instance.OnRotating;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
        void OnRotateOn(InputAction.CallbackContext context);
        void OnRotatePosition(InputAction.CallbackContext context);
        void OnRotating(InputAction.CallbackContext context);
    }
}
